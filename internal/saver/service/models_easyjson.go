// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package service

import (
	json "encoding/json"
	fmt "fmt"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComSwmhWbl0InternalSaverService(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var OrderUIDSet bool
	var TrackNumberSet bool
	var EntrySet bool
	var DeliverySet bool
	var PaymentSet bool
	var ItemsSet bool
	var LocaleSet bool
	var InternalSignatureSet bool
	var CustomerIDSet bool
	var DeliveryServiceSet bool
	var ShardkeySet bool
	var SmIDSet bool
	var DateCreatedSet bool
	var OofShardSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order_uid":
			out.OrderUID = string(in.String())
			OrderUIDSet = true
		case "track_number":
			out.TrackNumber = string(in.String())
			TrackNumberSet = true
		case "entry":
			out.Entry = string(in.String())
			EntrySet = true
		case "delivery":
			easyjsonD2b7633eDecode(in, &out.Delivery)
			DeliverySet = true
		case "payment":
			easyjsonD2b7633eDecode1(in, &out.Payment)
			PaymentSet = true
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]struct {
							ChrtID      int    `json:"chrt_id,required"`
							TrackNumber string `json:"track_number,required"`
							Price       int    `json:"price,required"`
							Rid         string `json:"rid,required"`
							Name        string `json:"name,required"`
							Sale        int    `json:"sale,required"`
							Size        string `json:"size,required"`
							TotalPrice  int    `json:"total_price,required"`
							NmID        int    `json:"nm_id,required"`
							Brand       string `json:"brand,required"`
							Status      int    `json:"status,required"`
						}, 0, 0)
					} else {
						out.Items = []struct {
							ChrtID      int    `json:"chrt_id,required"`
							TrackNumber string `json:"track_number,required"`
							Price       int    `json:"price,required"`
							Rid         string `json:"rid,required"`
							Name        string `json:"name,required"`
							Sale        int    `json:"sale,required"`
							Size        string `json:"size,required"`
							TotalPrice  int    `json:"total_price,required"`
							NmID        int    `json:"nm_id,required"`
							Brand       string `json:"brand,required"`
							Status      int    `json:"status,required"`
						}{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						ChrtID      int    `json:"chrt_id,required"`
						TrackNumber string `json:"track_number,required"`
						Price       int    `json:"price,required"`
						Rid         string `json:"rid,required"`
						Name        string `json:"name,required"`
						Sale        int    `json:"sale,required"`
						Size        string `json:"size,required"`
						TotalPrice  int    `json:"total_price,required"`
						NmID        int    `json:"nm_id,required"`
						Brand       string `json:"brand,required"`
						Status      int    `json:"status,required"`
					}
					easyjsonD2b7633eDecode2(in, &v1)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
			ItemsSet = true
		case "locale":
			out.Locale = string(in.String())
			LocaleSet = true
		case "internal_signature":
			out.InternalSignature = string(in.String())
			InternalSignatureSet = true
		case "customer_id":
			out.CustomerID = string(in.String())
			CustomerIDSet = true
		case "delivery_service":
			out.DeliveryService = string(in.String())
			DeliveryServiceSet = true
		case "shardkey":
			out.Shardkey = string(in.String())
			ShardkeySet = true
		case "sm_id":
			out.SmID = int(in.Int())
			SmIDSet = true
		case "date_created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreated).UnmarshalJSON(data))
			}
			DateCreatedSet = true
		case "oof_shard":
			out.OofShard = string(in.String())
			OofShardSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !OrderUIDSet {
		in.AddError(fmt.Errorf("key 'order_uid' is required"))
	}
	if !TrackNumberSet {
		in.AddError(fmt.Errorf("key 'track_number' is required"))
	}
	if !EntrySet {
		in.AddError(fmt.Errorf("key 'entry' is required"))
	}
	if !DeliverySet {
		in.AddError(fmt.Errorf("key 'delivery' is required"))
	}
	if !PaymentSet {
		in.AddError(fmt.Errorf("key 'payment' is required"))
	}
	if !ItemsSet {
		in.AddError(fmt.Errorf("key 'items' is required"))
	}
	if !LocaleSet {
		in.AddError(fmt.Errorf("key 'locale' is required"))
	}
	if !InternalSignatureSet {
		in.AddError(fmt.Errorf("key 'internal_signature' is required"))
	}
	if !CustomerIDSet {
		in.AddError(fmt.Errorf("key 'customer_id' is required"))
	}
	if !DeliveryServiceSet {
		in.AddError(fmt.Errorf("key 'delivery_service' is required"))
	}
	if !ShardkeySet {
		in.AddError(fmt.Errorf("key 'shardkey' is required"))
	}
	if !SmIDSet {
		in.AddError(fmt.Errorf("key 'sm_id' is required"))
	}
	if !DateCreatedSet {
		in.AddError(fmt.Errorf("key 'date_created' is required"))
	}
	if !OofShardSet {
		in.AddError(fmt.Errorf("key 'oof_shard' is required"))
	}
}
func easyjsonD2b7633eEncodeGithubComSwmhWbl0InternalSaverService(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order_uid\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrderUID))
	}
	{
		const prefix string = ",\"track_number\":"
		out.RawString(prefix)
		out.String(string(in.TrackNumber))
	}
	{
		const prefix string = ",\"entry\":"
		out.RawString(prefix)
		out.String(string(in.Entry))
	}
	{
		const prefix string = ",\"delivery\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode(out, in.Delivery)
	}
	{
		const prefix string = ",\"payment\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode1(out, in.Payment)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode2(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"locale\":"
		out.RawString(prefix)
		out.String(string(in.Locale))
	}
	{
		const prefix string = ",\"internal_signature\":"
		out.RawString(prefix)
		out.String(string(in.InternalSignature))
	}
	{
		const prefix string = ",\"customer_id\":"
		out.RawString(prefix)
		out.String(string(in.CustomerID))
	}
	{
		const prefix string = ",\"delivery_service\":"
		out.RawString(prefix)
		out.String(string(in.DeliveryService))
	}
	{
		const prefix string = ",\"shardkey\":"
		out.RawString(prefix)
		out.String(string(in.Shardkey))
	}
	{
		const prefix string = ",\"sm_id\":"
		out.RawString(prefix)
		out.Int(int(in.SmID))
	}
	{
		const prefix string = ",\"date_created\":"
		out.RawString(prefix)
		out.Raw((in.DateCreated).MarshalJSON())
	}
	{
		const prefix string = ",\"oof_shard\":"
		out.RawString(prefix)
		out.String(string(in.OofShard))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSwmhWbl0InternalSaverService(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSwmhWbl0InternalSaverService(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSwmhWbl0InternalSaverService(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSwmhWbl0InternalSaverService(l, v)
}
func easyjsonD2b7633eDecode2(in *jlexer.Lexer, out *struct {
	ChrtID      int    `json:"chrt_id,required"`
	TrackNumber string `json:"track_number,required"`
	Price       int    `json:"price,required"`
	Rid         string `json:"rid,required"`
	Name        string `json:"name,required"`
	Sale        int    `json:"sale,required"`
	Size        string `json:"size,required"`
	TotalPrice  int    `json:"total_price,required"`
	NmID        int    `json:"nm_id,required"`
	Brand       string `json:"brand,required"`
	Status      int    `json:"status,required"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var ChrtIDSet bool
	var TrackNumberSet bool
	var PriceSet bool
	var RidSet bool
	var NameSet bool
	var SaleSet bool
	var SizeSet bool
	var TotalPriceSet bool
	var NmIDSet bool
	var BrandSet bool
	var StatusSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chrt_id":
			out.ChrtID = int(in.Int())
			ChrtIDSet = true
		case "track_number":
			out.TrackNumber = string(in.String())
			TrackNumberSet = true
		case "price":
			out.Price = int(in.Int())
			PriceSet = true
		case "rid":
			out.Rid = string(in.String())
			RidSet = true
		case "name":
			out.Name = string(in.String())
			NameSet = true
		case "sale":
			out.Sale = int(in.Int())
			SaleSet = true
		case "size":
			out.Size = string(in.String())
			SizeSet = true
		case "total_price":
			out.TotalPrice = int(in.Int())
			TotalPriceSet = true
		case "nm_id":
			out.NmID = int(in.Int())
			NmIDSet = true
		case "brand":
			out.Brand = string(in.String())
			BrandSet = true
		case "status":
			out.Status = int(in.Int())
			StatusSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !ChrtIDSet {
		in.AddError(fmt.Errorf("key 'chrt_id' is required"))
	}
	if !TrackNumberSet {
		in.AddError(fmt.Errorf("key 'track_number' is required"))
	}
	if !PriceSet {
		in.AddError(fmt.Errorf("key 'price' is required"))
	}
	if !RidSet {
		in.AddError(fmt.Errorf("key 'rid' is required"))
	}
	if !NameSet {
		in.AddError(fmt.Errorf("key 'name' is required"))
	}
	if !SaleSet {
		in.AddError(fmt.Errorf("key 'sale' is required"))
	}
	if !SizeSet {
		in.AddError(fmt.Errorf("key 'size' is required"))
	}
	if !TotalPriceSet {
		in.AddError(fmt.Errorf("key 'total_price' is required"))
	}
	if !NmIDSet {
		in.AddError(fmt.Errorf("key 'nm_id' is required"))
	}
	if !BrandSet {
		in.AddError(fmt.Errorf("key 'brand' is required"))
	}
	if !StatusSet {
		in.AddError(fmt.Errorf("key 'status' is required"))
	}
}
func easyjsonD2b7633eEncode2(out *jwriter.Writer, in struct {
	ChrtID      int    `json:"chrt_id,required"`
	TrackNumber string `json:"track_number,required"`
	Price       int    `json:"price,required"`
	Rid         string `json:"rid,required"`
	Name        string `json:"name,required"`
	Sale        int    `json:"sale,required"`
	Size        string `json:"size,required"`
	TotalPrice  int    `json:"total_price,required"`
	NmID        int    `json:"nm_id,required"`
	Brand       string `json:"brand,required"`
	Status      int    `json:"status,required"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chrt_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ChrtID))
	}
	{
		const prefix string = ",\"track_number\":"
		out.RawString(prefix)
		out.String(string(in.TrackNumber))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"rid\":"
		out.RawString(prefix)
		out.String(string(in.Rid))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"sale\":"
		out.RawString(prefix)
		out.Int(int(in.Sale))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"total_price\":"
		out.RawString(prefix)
		out.Int(int(in.TotalPrice))
	}
	{
		const prefix string = ",\"nm_id\":"
		out.RawString(prefix)
		out.Int(int(in.NmID))
	}
	{
		const prefix string = ",\"brand\":"
		out.RawString(prefix)
		out.String(string(in.Brand))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode1(in *jlexer.Lexer, out *struct {
	Transaction  string `json:"transaction,required"`
	RequestID    string `json:"request_id,required"`
	Currency     string `json:"currency,required"`
	Provider     string `json:"provider,required"`
	Amount       int    `json:"amount,required"`
	PaymentDt    int    `json:"payment_dt,required"`
	Bank         string `json:"bank,required"`
	DeliveryCost int    `json:"delivery_cost,required"`
	GoodsTotal   int    `json:"goods_total,required"`
	CustomFee    int    `json:"custom_fee,required"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var TransactionSet bool
	var RequestIDSet bool
	var CurrencySet bool
	var ProviderSet bool
	var AmountSet bool
	var PaymentDtSet bool
	var BankSet bool
	var DeliveryCostSet bool
	var GoodsTotalSet bool
	var CustomFeeSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transaction":
			out.Transaction = string(in.String())
			TransactionSet = true
		case "request_id":
			out.RequestID = string(in.String())
			RequestIDSet = true
		case "currency":
			out.Currency = string(in.String())
			CurrencySet = true
		case "provider":
			out.Provider = string(in.String())
			ProviderSet = true
		case "amount":
			out.Amount = int(in.Int())
			AmountSet = true
		case "payment_dt":
			out.PaymentDt = int(in.Int())
			PaymentDtSet = true
		case "bank":
			out.Bank = string(in.String())
			BankSet = true
		case "delivery_cost":
			out.DeliveryCost = int(in.Int())
			DeliveryCostSet = true
		case "goods_total":
			out.GoodsTotal = int(in.Int())
			GoodsTotalSet = true
		case "custom_fee":
			out.CustomFee = int(in.Int())
			CustomFeeSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !TransactionSet {
		in.AddError(fmt.Errorf("key 'transaction' is required"))
	}
	if !RequestIDSet {
		in.AddError(fmt.Errorf("key 'request_id' is required"))
	}
	if !CurrencySet {
		in.AddError(fmt.Errorf("key 'currency' is required"))
	}
	if !ProviderSet {
		in.AddError(fmt.Errorf("key 'provider' is required"))
	}
	if !AmountSet {
		in.AddError(fmt.Errorf("key 'amount' is required"))
	}
	if !PaymentDtSet {
		in.AddError(fmt.Errorf("key 'payment_dt' is required"))
	}
	if !BankSet {
		in.AddError(fmt.Errorf("key 'bank' is required"))
	}
	if !DeliveryCostSet {
		in.AddError(fmt.Errorf("key 'delivery_cost' is required"))
	}
	if !GoodsTotalSet {
		in.AddError(fmt.Errorf("key 'goods_total' is required"))
	}
	if !CustomFeeSet {
		in.AddError(fmt.Errorf("key 'custom_fee' is required"))
	}
}
func easyjsonD2b7633eEncode1(out *jwriter.Writer, in struct {
	Transaction  string `json:"transaction,required"`
	RequestID    string `json:"request_id,required"`
	Currency     string `json:"currency,required"`
	Provider     string `json:"provider,required"`
	Amount       int    `json:"amount,required"`
	PaymentDt    int    `json:"payment_dt,required"`
	Bank         string `json:"bank,required"`
	DeliveryCost int    `json:"delivery_cost,required"`
	GoodsTotal   int    `json:"goods_total,required"`
	CustomFee    int    `json:"custom_fee,required"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transaction\":"
		out.RawString(prefix[1:])
		out.String(string(in.Transaction))
	}
	{
		const prefix string = ",\"request_id\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"provider\":"
		out.RawString(prefix)
		out.String(string(in.Provider))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"payment_dt\":"
		out.RawString(prefix)
		out.Int(int(in.PaymentDt))
	}
	{
		const prefix string = ",\"bank\":"
		out.RawString(prefix)
		out.String(string(in.Bank))
	}
	{
		const prefix string = ",\"delivery_cost\":"
		out.RawString(prefix)
		out.Int(int(in.DeliveryCost))
	}
	{
		const prefix string = ",\"goods_total\":"
		out.RawString(prefix)
		out.Int(int(in.GoodsTotal))
	}
	{
		const prefix string = ",\"custom_fee\":"
		out.RawString(prefix)
		out.Int(int(in.CustomFee))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode(in *jlexer.Lexer, out *struct {
	Name    string `json:"name,required"`
	Phone   string `json:"phone,required"`
	Zip     string `json:"zip,required"`
	City    string `json:"city,required"`
	Address string `json:"address,required"`
	Region  string `json:"region,required"`
	Email   string `json:"email,required"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var NameSet bool
	var PhoneSet bool
	var ZipSet bool
	var CitySet bool
	var AddressSet bool
	var RegionSet bool
	var EmailSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
			NameSet = true
		case "phone":
			out.Phone = string(in.String())
			PhoneSet = true
		case "zip":
			out.Zip = string(in.String())
			ZipSet = true
		case "city":
			out.City = string(in.String())
			CitySet = true
		case "address":
			out.Address = string(in.String())
			AddressSet = true
		case "region":
			out.Region = string(in.String())
			RegionSet = true
		case "email":
			out.Email = string(in.String())
			EmailSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !NameSet {
		in.AddError(fmt.Errorf("key 'name' is required"))
	}
	if !PhoneSet {
		in.AddError(fmt.Errorf("key 'phone' is required"))
	}
	if !ZipSet {
		in.AddError(fmt.Errorf("key 'zip' is required"))
	}
	if !CitySet {
		in.AddError(fmt.Errorf("key 'city' is required"))
	}
	if !AddressSet {
		in.AddError(fmt.Errorf("key 'address' is required"))
	}
	if !RegionSet {
		in.AddError(fmt.Errorf("key 'region' is required"))
	}
	if !EmailSet {
		in.AddError(fmt.Errorf("key 'email' is required"))
	}
}
func easyjsonD2b7633eEncode(out *jwriter.Writer, in struct {
	Name    string `json:"name,required"`
	Phone   string `json:"phone,required"`
	Zip     string `json:"zip,required"`
	City    string `json:"city,required"`
	Address string `json:"address,required"`
	Region  string `json:"region,required"`
	Email   string `json:"email,required"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"zip\":"
		out.RawString(prefix)
		out.String(string(in.Zip))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
